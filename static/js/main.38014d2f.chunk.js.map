{"version":3,"sources":["../../src/hooks/useSignal.tsx","UseSignalExample.tsx","UseListenerExample.tsx","../../src/hooks/useListener.tsx","App.tsx","index.tsx"],"names":["useSignal","useState","signal","setSignal","listeners","setListeners","dispatch","useCallback","add","remove","removeAll","UseSignalExample","dispacheLog","setDispacheLog","count","setCount","funk","data","pre","newCount","preLog","useEffect","type","onClick","length","console","log","map","item","index","key","UseListenerExample","listener","fn","useMemo","dispose","useListener","App","ReactDOM","render","document","getElementById"],"mappings":"6MAGgBA,IACd,MAA4BC,mBAAS,IAArC,UAAOC,EAAP,KAAeC,EAAf,KAEA,EAAkCF,mBAASC,EAA3C,WAAOE,EAAP,KAAkBC,EAAlB,KA8BA,MAAO,CAAEC,SA5BQC,sBAAYL,EAAD,SAAkB,CAA9C,IA4BmBM,IA3BPD,uBACV,YACEL,SAEAC,KACAE,EAAaH,EAAbG,aAEF,CAPF,IA2BwBI,OAjBTF,uBACb,YACEL,YAEAC,KACAE,EAAaH,EAAbG,aAEF,CAPF,IAiBgCK,UAPdH,uBAAY,WAC5BL,cAEAC,KACAE,EAAaH,EAAbG,aACC,CALH,IAO2CD,aCjCtC,IAAMO,EAAmB,WAC9B,MAAsCV,mBAAmB,IAAzD,mBAAOW,EAAP,KAAoBC,EAApB,KAEA,EAA0BZ,mBAAS,GAAnC,mBAAOa,EAAP,KAAcC,EAAd,KAEMb,EAASF,IAETgB,EAAOT,uBAAY,SAACU,GACxBF,GAAS,SAACG,GACR,IAAMC,EAAWD,EAAM,EAMvB,OALAL,GAAe,SAACO,GAAD,4BACVA,GADU,uBAEEH,EAFF,sBAEoBC,EAFpB,eAE8BC,QAGtCD,EAAM,OAEd,IAOH,OALAG,qBAAU,WACRnB,EAAOM,IAAIQ,KAEV,IAGD,6BACE,6BACGF,EACD,4BACEQ,KAAK,SACLC,QAAS,WACPV,EAAe,IACfX,EAAOI,SAASQ,KAJpB,aAWF,6BACGZ,EAAOE,UAAUoB,OAClB,4BACEF,KAAK,SACLC,QAAS,WACPE,QAAQC,IAAI,OACZxB,EAAOM,IAAIQ,KAJf,QAWF,6BACGJ,EAAYe,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,GACR,4BACEP,KAAK,SACLC,QAAS,WACPrB,EAAOO,OAAOP,EAAOE,UAAUyB,MAHnC,UAQCD,OAKP,6BACE,4BAAQN,KAAK,SAASC,QAAS,kBAAMrB,EAAOQ,cAA5C,gBCrEKqB,EAAqB,WAChC,MAAsC9B,mBAAmB,IAAzD,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAA0BZ,mBAAS,GAAnC,mBAAOa,EAAP,KAAcC,EAAd,KAEMb,EAASF,IAETgB,EAAOT,uBAAY,SAACU,GACxBF,GAAS,SAACG,GACR,IAAMC,EAAWD,EAAM,EAMvB,OALAL,GAAe,SAACO,GAAD,4BACVA,GADU,uBAEEH,EAFF,sBAEoBC,EAFpB,eAE8BC,QAGtCD,EAAM,OAEd,IAEGc,E,SChBN9B,EACA+B,GAEA,IAAMD,EAAWE,mBAAQ,kBAAM,IAAI,EAAJ,iBAAN,KAAzB,IAMA,MAAO,CAAEC,QAJO5B,uBAAY,WAC1B,OAAOyB,EAAP,YACC,CAFH,IAIkBA,YDODI,CAAYlC,EAAQc,GAErC,OACE,6BACE,6BACGF,EACD,4BACEQ,KAAK,SACLC,QAAS,WACPV,EAAe,IACfX,EAAOI,SAASQ,KAJpB,aAWF,6BACGZ,EAAOE,UAAUoB,OAClB,4BACEF,KAAK,SACLC,QAAS,WACPE,QAAQC,IAAI,WACZM,EAASG,YAJb,YAWF,6BACGvB,EAAYe,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,GAAQD,SElCbS,EAfH,WACV,OACE,6BACE,6BACE,gDACA,kBAAC,EAAD,OAEF,6BACE,kDACA,kBAAC,EAAD,SCPRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.38014d2f.chunk.js","sourcesContent":["import { Signal } from '@yoieh/signal'\nimport { useCallback, useState } from 'react'\n\nexport function useSignal<Listener extends (...args: any[]) => any>() {\n  const [signal, setSignal] = useState(new Signal<Listener>())\n\n  const [listeners, setListeners] = useState(signal.listeners)\n\n  const dispatch = useCallback(signal.dispatch, [signal])\n  const add = useCallback(\n    (arg) => {\n      signal.add(arg)\n\n      setSignal(signal)\n      setListeners(signal.listeners)\n    },\n    [signal]\n  )\n\n  const remove = useCallback(\n    (listener) => {\n      signal.remove(listener)\n\n      setSignal(signal)\n      setListeners(signal.listeners)\n    },\n    [signal]\n  )\n\n  const removeAll = useCallback(() => {\n    signal.removeAll()\n\n    setSignal(signal)\n    setListeners(signal.listeners)\n  }, [signal])\n\n  return { dispatch, add, remove, removeAll, listeners }\n}\nexport default useSignal\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { useSignal } from '@yoieh/use-signal'\n\nexport const UseSignalExample = () => {\n  const [dispacheLog, setDispacheLog] = useState<string[]>([])\n\n  const [count, setCount] = useState(0)\n\n  const signal = useSignal<any>()\n\n  const funk = useCallback((data: string) => {\n    setCount((pre) => {\n      const newCount = pre + 1\n      setDispacheLog((preLog) => [\n        ...preLog,\n        `dispatched: ${data}, changed :${pre} => ${newCount}`\n      ])\n\n      return pre + 1\n    })\n  }, [])\n\n  useEffect(() => {\n    signal.add(funk)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <div>\n      <div>\n        {count}\n        <button\n          type='button'\n          onClick={() => {\n            setDispacheLog([])\n            signal.dispatch(count)\n          }}\n        >\n          dispatch\n        </button>\n      </div>\n\n      <div>\n        {signal.listeners.length}\n        <button\n          type='button'\n          onClick={() => {\n            console.log('Add')\n            signal.add(funk)\n          }}\n        >\n          add\n        </button>\n      </div>\n\n      <div>\n        {dispacheLog.map((item, index) => (\n          <div key={index}>\n            <button\n              type='button'\n              onClick={() => {\n                signal.remove(signal.listeners[index])\n              }}\n            >\n              remove\n            </button>\n            {item}\n          </div>\n        ))}\n      </div>\n\n      <div>\n        <button type='button' onClick={() => signal.removeAll()}>\n          removeAll\n        </button>\n      </div>\n    </div>\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport { useListener, useSignal } from '@yoieh/use-signal'\n\nexport const UseListenerExample = () => {\n  const [dispacheLog, setDispacheLog] = useState<string[]>([])\n  const [count, setCount] = useState(0)\n\n  const signal = useSignal()\n\n  const funk = useCallback((data: string) => {\n    setCount((pre) => {\n      const newCount = pre + 1\n      setDispacheLog((preLog) => [\n        ...preLog,\n        `dispatched: ${data}, changed :${pre} => ${newCount}`\n      ])\n\n      return pre + 1\n    })\n  }, [])\n\n  const listener = useListener(signal, funk)\n\n  return (\n    <div>\n      <div>\n        {count}\n        <button\n          type='button'\n          onClick={() => {\n            setDispacheLog([])\n            signal.dispatch(count)\n          }}\n        >\n          dispatch\n        </button>\n      </div>\n\n      <div>\n        {signal.listeners.length}\n        <button\n          type='button'\n          onClick={() => {\n            console.log('Dispose')\n            listener.dispose()\n          }}\n        >\n          dispose\n        </button>\n      </div>\n\n      <div>\n        {dispacheLog.map((item, index) => (\n          <div key={index}>{item}</div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","// eslint-disable-next-line no-unused-vars\nimport { Signal, SignalListener } from '@yoieh/signal'\nimport { useCallback, useMemo } from 'react'\n\nexport function useListener<Listener extends (...args: any[]) => any>(\n  signal: Signal<Listener>,\n  fn: Listener\n) {\n  const listener = useMemo(() => new SignalListener<Listener>(signal, fn), [])\n\n  const dispose = useCallback(() => {\n    return listener.dispose()\n  }, [listener])\n\n  return { dispose, listener }\n}\nexport default useListener\n","import React from 'react'\nimport { UseSignalExample } from './UseSignalExample'\nimport { UseListenerExample } from './UseListenerExample'\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        <h3>UseSignalExample</h3>\n        <UseSignalExample></UseSignalExample>\n      </div>\n      <div>\n        <h3>UseListenerExample</h3>\n        <UseListenerExample></UseListenerExample>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}